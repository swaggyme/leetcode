递归：
class Solution {
    public boolean verifyPostorder(int[] postorder) {
        return recur(postorder, 0, postorder.length-1);
    }
    boolean recur(int[] p, int i, int j){
        if(i >= j) return true;
        int m = i;
        while(p[m] < p[j]) m++;
        int n = m;
        while(p[m] > p[j]) m++;
        return m == j && recur(p, i, n-1) && recur(p, n, j-1);
    }
}
时间复杂度 O(N^2)： 每次调用 recur(i,j)减去一个根节点，因此递归占用O(N) ；最差情况下（即当树退化为链表），每轮递归都需遍历树所有节点，占用 O(N)O(N) 。
空间复杂度 O(N)： 最差情况下（即当树退化为链表），递归深度将达到 N 。

辅助栈：
class Solution {
    public boolean verifyPostorder(int[] postorder) {
        Stack<Integer> s = new Stack<>();
        int root = Integer.MAX_VALUE;
        for(int i = postorder.length - 1; i >= 0; i--){
            if(postorder[i] > root){
                return false;
            }
            while(!s.isEmpty() && postorder[i] < s.peek()){
                root = s.pop();
            }
            s.add(postorder[i]);
        }
        return true;
    }
}

时间复杂度 O(N) ： 遍历 postorder 所有节点，各节点均入栈 / 出栈一次，使用 O(N) 时间。
空间复杂度 O(N) ： 最差情况下，单调栈 stack 存储所有节点，使用 O(N) 额外空间。
