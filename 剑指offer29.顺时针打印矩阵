class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if(matrix.length == 0){
            return new int[0];
        }
        int l = 0;
        int r = matrix[0].length - 1;
        int t = 0;
        int b = matrix.length - 1;
        int c = 0;
        int[] res = new int[(r + 1) * (b + 1)];
        while(true){
            for(int i = l; i <= r; i++){
                res[c++] = matrix[t][i];
            }
            if(++t > b){
                break;
            }
            for(int i = t; i <= b; i++){
                res[c++] = matrix[i][r];
            }
            if(l > --r){
                break;
            }
            for(int i = r; i >= l; i--){
                res[c++] = matrix[b][i];
            }
            if(t > --b){
                break;
            }
            for(int i = b; i >= t; i--){
                res[c++] = matrix[i][l];
            }
            if(++l > r){
                break;
            }
        }
        return res;
    }
}


时间复杂度 O(MN) ： M, NM,N 分别为矩阵行数和列数。
空间复杂度 O(1) ： 四个边界 l , r , t , b 使用常数大小的额外空间（res 为必须使用的空间）。
