class Solution {
    public boolean exist(char[][] board, String word) {
        char[] words = word.toCharArray();
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(dfs(board, i, j, words, 0)){
                    return true;
                }
            }
        }
        return false;
    }
    boolean dfs(char[][] board, int i, int j, char[] words, int k){
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != words[k]){
            return false;
        }
        if(k == words.length - 1){
            return true;
        }
        char tmp = board[i][j];
        board[i][j] = '/';
        boolean res = dfs(board, i + 1, j, words, k + 1) || dfs(board, i, j + 1, words, k + 1) || dfs(board, i - 1, j, words, k + 1) || dfs(board, i, j - 1, words, k + 1);
        board[i][j] = tmp;
        return res;
    }
}
时间复杂度 O(3^KMN) ： 最差情况下，需要遍历矩阵中长度为 K 字符串的所有方案，时间复杂度为 O(3K)；矩阵中共有 MN 个起点，时间复杂度为 O(MN) 。

空间复杂度 O(K) ： 搜索过程中的递归深度不超过 K ，因此系统因函数调用累计使用的栈空间占用 O(K) （因为函数返回后，系统调用的栈空间会释放）。最坏情况下 K=MN ，递归深度为 MN ，此时系统栈使用 O(MN) 的额外空间。
