动态规划
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        if( n * k == 0){
            return new int[0];
        }
        if(k == 1){
            return nums;
        }
        int[] left = new int[n];
        left[0] = nums[0];
        int[] right = new int[n];
        right[n-1] = nums[n-1];
        for(int i = 1; i < n; i++){
            if(i % k == 0){
                left[i] = nums[i];
            }else{
                left[i] = Math.max(left[i - 1], nums[i]);
            }

            int j = n - i - 1;
            if((j + 1) % k == 0){
                right[j] = nums[j];
            }else{
                right[j] = Math.max(right[j + 1], nums[j]);
            }

        }            
        int[] res = new int[n - k + 1];
        for(int i = 0; i < n - k + 1; i++){
            res[i] = Math.max(left[i + k -1], right[i]);
        }
        return res;
    }
}
时间复杂度：O(N)，我们对长度为 N 的数组处理了 3次。

空间复杂度：O(N)，用于存储长度为 N 的 left 和 right 数组，以及长度为 N - k + 1的输出数组。

