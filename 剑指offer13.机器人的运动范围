深度优先dfs
class Solution {
    int m, n, k;
    boolean[][] visited;
    public int movingCount(int m, int n, int k) {
        this.m = m;
        this.n = n;
        this.k = k;
        this.visited = new boolean[m][n];
        return dfs(0, 0, 0, 0);
    }
    public int dfs(int i, int j, int p, int q){
        if(i < 0 || i >= m || j < 0 || j >= n || p + q > k || visited[i][j]){
            return 0;
        }
        visited[i][j] = true;
        int pplus;
        int qplus;
        if((i + 1) % 10 == 0){
            pplus = p - 8;
        }else{
            pplus = p + 1;
        }
        if((j + 1) % 10 == 0){
            qplus = q - 8;
        }else{
            qplus = q + 1;
        }
        return 1 + dfs(i + 1, j, pplus, q) + dfs(i, j + 1, p, qplus);
        
    }
}

时间复杂度 O(MN) ： 最差情况下，机器人遍历矩阵所有单元格，此时时间复杂度为 O(MN) 。
空间复杂度 O(MN) ： 最差情况下，Set visited 内存储矩阵所有单元格的索引，使用 O(MN) 的额外空间。





class Solution {
    public int movingCount(int m, int n, int k) {
        boolean[][] visited = new boolean[m][n];
        int res = 0;
        Queue<int[]> queue = new LinkedList<int[]>();
        queue.add(new int[] {0, 0, 0, 0});
        while(queue.size() > 0){
            int[] x = queue.poll();
            int i = x[0];
            int j = x[1];
            int p = x[2];
            int q = x[3];
            if(i >= m || j >= n || p + q > k || visited[i][j]){
                continue;
            }
            visited[i][j] = true;
            res++;
            int pplus;
            int qplus;
            if((i + 1) % 10 == 0){
                pplus = p - 8;
            }else{
                pplus = p + 1;
            }
            if((j + 1) % 10 == 0){
                qplus = q - 8;
            }else{
                qplus = q + 1;
            }
            queue.add(new int[] {i + 1, j, pplus, q});
            queue.add(new int[] {i, j + 1, p, qplus}); 
        }
        return res;
    }
}

时间复杂度 O(MN) ： 最差情况下，机器人遍历矩阵所有单元格，此时时间复杂度为 O(MN) 。
空间复杂度 O(MN) ： 最差情况下，Set visited 内存储矩阵所有单元格的索引，使用 O(MN) 的额外空间。
