class Solution {
    StringBuilder res;
    int nine = 0;
    int count = 0;
    int start;
    int n;
    char[] num;
    char[] loop = {'0','1', '2', '3', '4', '5', '6', '7', '8', '9'};
    public int[] printNumbers(int n) {
        this.n = n;
        res = new StringBuilder();
        num = new char[n];
        start = n - 1;
        dfs(0);
        res.deleteCharAt(res.length() - 1);
        return res.toString();
    }
    void dfs(int x){
        if(x == n){
            String s = String.valueOf(num).substring(start);
            if(!s.equals("0"){
                res.append(s + ",");
                if(n - start == nine){
                    start--;
                }
                return;
            }
        }
        for(char i : loop){
            if(i == '9'){
                nine++;
            }
            num[x] = i;
            dfs(x + 1);
        }
        nine--;
    }
}

时间复杂度 O(10^n) ： 递归的生成的排列的数量为 10^n。
空间复杂度 O(n) ： 字符列表 num 使用线性大小的额外空间
