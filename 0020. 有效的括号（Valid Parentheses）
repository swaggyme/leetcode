class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(this.mappings.containsKey(c)){
                char topElement = stack.empty() ? '#' : stack.pop();
                if(topElement != this.mappings.get(c)){
                    return false;
                }
            }
            else{
                stack.push(c);
            }
        }
        return stack.isEmpty();
    }
    private HashMap<Character, Character> mappings;
    public Solution(){
        this.mappings = new HashMap<Character, Character>();
        this.mappings.put(')', '(');
        this.mappings.put(']', '[');
        this.mappings.put('}', '{');
    }
}
##########################################################################################################################################
##########################################################################################################################################
class Solution {
    public boolean isValid(String s) {
        if( s.length() == 0 )
            return true;
        if((s.length() & 1) == 1 )
            return false;
        Stack<Character> stack = new Stack<>();
        for( int i = 0; i < s.length(); i++){
            switch( s.charAt(i) ){
                case '(':
                case '[':
                case '{':
                    stack.push(s.charAt(i));
                    continue;
                case ')':
                    if(stack.isEmpty() || stack.pop() != '(')
                        return false;
                    continue;
                case ']':
                    if(stack.isEmpty() || stack.pop() != '[')
                        return false;
                    continue;
                case '}':
                    if(stack.isEmpty() || stack.pop() != '{')
                        return false;
                    continue;
            }
        }
        return stack.isEmpty();
    }
}
