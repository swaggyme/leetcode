class Solution {
    public int cuttingRope(int n) {
        if(n <= 3) return n - 1;
        int a = n / 3;
        int b = n % 3;
        if(b == 0){
            return (int)Math.pow(3, a);
        }else if(b == 1){
            return (int)Math.pow(3, a - 1) * 4;
        }else{
            return (int)Math.pow(3, a) * 2;
        }
    }
}
o(1);
o(1);

动态规划：
class Solution {
    public int cuttingRope(int n) {
        int dp[] = new int[n + 1];
        dp[1] = 1;
        for(int i = 2; i <= n; i++){
            for(int j = 1; j < i; j++){
                dp[i] = Math.max(dp[i], Math.max(j, dp[j]) * Math.max(dp[i - j], i - j));
            }
        }
        return dp[n];
    }
}
o(n^2);
o(n);



class Solution {
    public int integerBreak(int n) {
        if (n < 4) {
            return n - 1;
        }
        int[] dp = new int[n + 1];
        dp[2] = 1;
        for (int i = 3; i <= n; i++) {
            dp[i] = Math.max(Math.max(2 * (i - 2), 2 * dp[i - 2]), Math.max(3 * (i - 3), 3 * dp[i - 3]));
        }
        return dp[n];
    }
}
o(n);
o(n);
