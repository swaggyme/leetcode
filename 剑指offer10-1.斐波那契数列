方法一：递归
public class Solution{
	public int fib(int n){
		if(n < 2){
			return n;
		}
		return fib(n - 1) + fib(i - 2);
	}
}	
func fib(n int) int {
	if(n < 2){
		return n;	
	}
	return fib(n - 1) + fib(n - 2);
}
时间复杂度：O(2^n);
空间复杂度：O(n);

方法二：辅助数组
class Solution{
	public int fib(int n)｛
		int fibArray = int[n+1];
		fibArray[0] = 0;
		if(n > 0) fibArray[1] = 1;
		for(int i = 2; i < n+1; i++){
			fibArray[i] = (fibArray[i-1] + fibArray[i-2]) % 1000000007;
		}
		return fibArray[i];
	}
}
时间复杂度：O(n);
空间复杂度：O(n);

方法三：迭代
class Solution｛
	public int fib(int n){
		if(n < 2){
			return n;
		}
		if(n == 2){
			return 1;
		}
		int cur = 0;
		int prev1 = 1;
		int prev2 = 1;
	
		for(int i = 3; i<= n; i++){
			cur = prev1 + prev2;
			prev1 = prev2;
			prev2 = cur;
		}
		return cur;
	}	
 }
时间复杂度：O(n);
空间复杂度：O(1);
	
	
方法四：矩阵求幂
方法五：公式法
class Solution {
    public int climbStairs(int n) {
        double sqrt5 = Math.sqrt(5);
        double funcn = Math.pow((1+sqrt5)/2, n+1) - Math.pow((1-sqrt5)/2, n+1);
        return (int)(funcn/sqrt5);
    }
}
时间复杂度：O(logn)，pow 方法将会用去 O(logn) 的时间。
空间复杂度：O(1)
