1.哈希表
class Solution {
    public char firstUniqChar(String s) {
        HashMap<Character,Boolean> dic = new HashMap<>();
        char[] sc = s.toCharArray();
        for(char c : sc){
            dic.put(c, !dic.containsKey(c)); //containsKey()只能从true转换为false
        }
        for(char c : sc){
            if(dic.get(c)){
                return c;
            }
        }
        return ' ';
    }
}

2.有序哈希表
class Solution {
    public char firstUniqChar(String s) {
        Map<Character,Boolean> dic = new LinkedHashMap<>();
        char[] sc = s.toCharArray();
        for(char c : sc){
            dic.put(c, !dic.containsKey(c));
        }
        for(Map.Entry<Character, Boolean> d : dic.entrySet()){
            if(d.getValue()){
                return d.getKey();
            }
        }
        return ' ';
    }
}

2.数组替代哈希表（最佳）
class Solution {
    public char firstUniqChar(String s) {
        int[] count = new int[26];
        for(int i = 0; i < s.length(); i++){
            count[s.charAt(i)-'a']++;
        }
        for(int i = 0; i < s.length(); i++){
            if(count[s.charAt(i)-'a'] == 1){
                return s.charAt(i);
            }
        }
        return ' ';
    }
}
